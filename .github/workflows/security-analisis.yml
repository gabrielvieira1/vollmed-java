name: 🛡️ Security Analysis Pipeline

on:
  workflow_dispatch:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * 1'  # Weekly security scan (Mondays at 2 AM)

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

env:
  # Security scan configuration
  FAIL_ON_CRITICAL: true
  FAIL_ON_HIGH: false
  GENERATE_SARIF: true

jobs:
  security-scan:
    name: 🛡️ Security Pipeline
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    outputs:
      vulnerabilities-found: ${{ steps.summary.outputs.vulnerabilities-found }}
      critical-count: ${{ steps.summary.outputs.critical-count }}
      high-count: ${{ steps.summary.outputs.high-count }}
    
    steps:
      - name: 🔄 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ☕ Setup Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: 🔍 Initialize Security Summary
        run: |
          echo "# 🛡️ Security Analysis Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📅 **Scan Date**: $(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Repository**: ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "🌲 **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "💾 **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  gitleaks:
    name: 🔐 GitLeaks - Secret Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: security-scan
    continue-on-error: true
    
    steps:
      - name: 🔄 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Run GitLeaks Scan
        id: gitleaks-scan
        run: |
          echo "🕵️ Executando GitLeaks via Docker (mesmo método do pre-commit)..."
          
          # Criar diretórios necessários
          mkdir -p logs
          
          # Executar GitLeaks via Docker - MESMO COMANDO DO PRE-COMMIT
          docker run --rm \
            -v $(pwd):/path \
            zricethezav/gitleaks:latest \
            detect --source=/path --no-git --verbose --report-format=json --report-path=/path/gitleaks-report.json || echo "GITLEAKS_FAILED=true" >> $GITHUB_ENV
          
          # Também gerar SARIF para compatibilidade com GitHub Security
          if [ -f "gitleaks-report.json" ]; then
            docker run --rm \
              -v $(pwd):/path \
              zricethezav/gitleaks:latest \
              detect --source=/path --no-git --report-format=sarif --report-path=/path/results.sarif || true
          fi
          
          echo "📋 Resultados salvos em gitleaks-report.json e results.sarif"
        continue-on-error: true

      - name: 📋 Generate Human-Readable Report
        if: always()
        run: |
          # Criar relatório legível se houver resultados
          if [ -f "gitleaks-report.json" ]; then
            echo "# 🔍 GitLeaks Detailed Report" > gitleaks-summary.md
            echo "" >> gitleaks-summary.md
            echo "**Scan Date:** $(date)" >> gitleaks-summary.md
            echo "" >> gitleaks-summary.md
            
            # Parse JSON com jq se disponível
            if command -v jq >/dev/null 2>&1; then
              TOTAL_SECRETS=$(jq '. | length' gitleaks-report.json 2>/dev/null || echo "0")
              echo "**Total Secrets Found:** $TOTAL_SECRETS" >> gitleaks-summary.md
              echo "" >> gitleaks-summary.md
              
              if [ "$TOTAL_SECRETS" -gt "0" ]; then
                echo "## 🚨 Detected Secrets:" >> gitleaks-summary.md
                jq -r '.[] | "- **File:** \(.File)\n  - **Line:** \(.StartLine)\n  - **Rule:** \(.RuleID)\n  - **Description:** \(.Description)\n"' gitleaks-report.json >> gitleaks-summary.md
              else
                echo "✅ No secrets detected!" >> gitleaks-summary.md
              fi
            else
              echo "⚠️ jq not available for detailed parsing" >> gitleaks-summary.md
            fi
          else
            echo "# ✅ GitLeaks Report - No Secrets Found" > gitleaks-summary.md
            echo "" >> gitleaks-summary.md
            echo "**Status:** Clean scan - no secrets detected" >> gitleaks-summary.md
          fi

      - name: 📊 GitLeaks Results Summary
        if: always()
        run: |
          # Verificar se GitLeaks encontrou vulnerabilidades (exit code > 0 OU variável GITLEAKS_FAILED)
          if [[ "$GITLEAKS_FAILED" == "true" ]] || [[ "${{ steps.gitleaks-scan.outcome }}" == "failure" ]]; then
            echo "## ❌ GitLeaks - Secret Detection" >> $GITHUB_STEP_SUMMARY
            echo "- 🔴 **Status**: Secrets detected!" >> $GITHUB_STEP_SUMMARY
            echo "- 🔍 **Scan Mode**: Full repository scan (all files)" >> $GITHUB_STEP_SUMMARY
            echo "- ⚠️ **Action Required**: Review and remove exposed secrets" >> $GITHUB_STEP_SUMMARY
            
            # Adicionar detalhes se arquivo JSON existe
            if [ -f "gitleaks-report.json" ] && command -v jq >/dev/null 2>&1; then
              TOTAL_SECRETS=$(jq '. | length' gitleaks-report.json 2>/dev/null || echo "0")
              echo "- 📊 **Secrets Found**: $TOTAL_SECRETS" >> $GITHUB_STEP_SUMMARY
              echo "- 📋 **Details**: Download artifacts for full analysis" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "- 📖 **Documentation**: [GitLeaks Documentation](https://github.com/gitleaks/gitleaks)" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ✅ GitLeaks - Secret Detection" >> $GITHUB_STEP_SUMMARY
            echo "- 🟢 **Status**: No secrets detected" >> $GITHUB_STEP_SUMMARY
            echo "- 🔍 **Scan Mode**: Full repository scan (all files)" >> $GITHUB_STEP_SUMMARY
            echo "- 📄 **Report**: Check artifacts for detailed results" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: 📤 Upload GitLeaks Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-results
          path: |
            gitleaks-report.json
            gitleaks-summary.md
            results.sarif
          retention-days: 30

  semgrep:
    name: 🧪 Semgrep - SAST Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: security-scan
    continue-on-error: true
    
    container:
      image: semgrep/semgrep
    
    if: (github.actor != 'dependabot[bot]')
    
    env:
      SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
    
    steps:
      - name: 🔄 Checkout Repository
        uses: actions/checkout@v4

      - name: 🧪 Run Semgrep Analysis
        id: semgrep-scan
        run: |
          # Capturar output completo do semgrep para extrair links
          semgrep ci --json --output=semgrep-results.json 2>&1 | tee semgrep-output.log || echo "SEMGREP_FAILED=true" >> $GITHUB_ENV
          
          # Extrair URLs dos resultados do log
          FINDINGS_URL=""
          SUPPLY_CHAIN_URL=""
          
          if grep -q "View results in Semgrep Cloud Platform:" semgrep-output.log; then
            FINDINGS_URL=$(grep -A2 "View results in Semgrep Cloud Platform:" semgrep-output.log | grep "findings" | xargs || echo "")
            SUPPLY_CHAIN_URL=$(grep -A3 "View results in Semgrep Cloud Platform:" semgrep-output.log | grep "supply-chain" | xargs || echo "")
          fi
          
          # Salvar URLs em variáveis de ambiente
          echo "SEMGREP_FINDINGS_URL=$FINDINGS_URL" >> $GITHUB_ENV
          echo "SEMGREP_SUPPLY_CHAIN_URL=$SUPPLY_CHAIN_URL" >> $GITHUB_ENV
        continue-on-error: true

      - name: 📊 Process Semgrep Results
        if: always()
        run: |
          echo "## 🧪 Semgrep - Static Analysis" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "semgrep-results.json" ]; then
            # Parse results using jq if available, otherwise basic analysis
            if command -v jq >/dev/null 2>&1; then
              TOTAL_ISSUES=$(jq '.results | length' semgrep-results.json 2>/dev/null || echo "0")
              CRITICAL_ISSUES=$(jq '[.results[] | select(.extra.severity == "ERROR")] | length' semgrep-results.json 2>/dev/null || echo "0")
              HIGH_ISSUES=$(jq '[.results[] | select(.extra.severity == "WARNING")] | length' semgrep-results.json 2>/dev/null || echo "0")
              
              echo "- 📊 **Total Issues**: $TOTAL_ISSUES" >> $GITHUB_STEP_SUMMARY
              echo "- 🚨 **Critical/Error**: $CRITICAL_ISSUES" >> $GITHUB_STEP_SUMMARY  
              echo "- 🟡 **Warning**: $HIGH_ISSUES" >> $GITHUB_STEP_SUMMARY
              
              if [ "$TOTAL_ISSUES" -gt "0" ]; then
                echo "- 🔴 **Status**: Vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
                echo "- 📋 **Action**: Review findings in job logs" >> $GITHUB_STEP_SUMMARY
              else
                echo "- 🟢 **Status**: No issues found" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "- ℹ️ **Status**: Analysis completed (detailed parsing unavailable)" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- ⚠️ **Status**: Analysis failed or no results file generated" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Adicionar links dos resultados se disponíveis
          if [ -n "$SEMGREP_FINDINGS_URL" ] || [ -n "$SEMGREP_SUPPLY_CHAIN_URL" ]; then
            echo "- 🔗 **View Results in Semgrep Cloud Platform**:" >> $GITHUB_STEP_SUMMARY
            
            if [ -n "$SEMGREP_FINDINGS_URL" ]; then
              echo "  - 📋 [Code Security Findings]($SEMGREP_FINDINGS_URL)" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ -n "$SEMGREP_SUPPLY_CHAIN_URL" ]; then
              echo "  - 📦 [Supply Chain Vulnerabilities]($SEMGREP_SUPPLY_CHAIN_URL)" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: 📤 Upload Semgrep Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: |
            semgrep-results.json
            semgrep-output.log
          retention-days: 30

  snyk:
    name: 🐍 Snyk - Dependency Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: security-scan
    continue-on-error: true
    
    steps:
      - name: 🔄 Checkout Repository
        uses: actions/checkout@v4

      - name: ☕ Setup Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name:  Build Project
        run: ./mvnw compile -DskipTests

      - name: 🐍 Run Snyk Security Scan
        id: snyk-scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          # Criar diretório de logs
          mkdir -p logs
          
          # Verificar se o token está configurado e executar Snyk via Docker (mesmo container do pre-commit)
          if [ -n "$SNYK_TOKEN" ]; then
            echo "🛡️ Executando Snyk Security Scan via Docker com autenticação..."
            docker run --rm \
              -e SNYK_TOKEN="$SNYK_TOKEN" \
              -v $(pwd):/project \
              -w /project \
              snyk/snyk:java \
              snyk test --package-manager=maven --severity-threshold=medium --json-file-output=snyk-results.json || echo "SNYK_SCAN_FAILED=true" >> $GITHUB_ENV
          else
            echo "⚠️ SNYK_TOKEN não configurado, executando sem autenticação (funcionalidade limitada)..."
            docker run --rm \
              -v $(pwd):/project \
              -w /project \
              snyk/snyk:java \
              snyk test --package-manager=maven --severity-threshold=medium --json-file-output=snyk-results.json || echo "SNYK_SCAN_FAILED=true" >> $GITHUB_ENV
          fi
          
          echo "📋 Resultado do scan disponível em snyk-results.json"
        continue-on-error: true

      - name: 📊 Process Snyk Results  
        if: always()
        run: |
          echo "## 🐍 Snyk - Dependency Analysis" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "snyk-results.json" ]; then
            if command -v jq >/dev/null 2>&1; then
              TOTAL_VULNS=$(jq '.vulnerabilities | length' snyk-results.json 2>/dev/null || echo "0")
              CRITICAL_VULNS=$(jq '[.vulnerabilities[] | select(.severity == "critical")] | length' snyk-results.json 2>/dev/null || echo "0")
              HIGH_VULNS=$(jq '[.vulnerabilities[] | select(.severity == "high")] | length' snyk-results.json 2>/dev/null || echo "0")
              MEDIUM_VULNS=$(jq '[.vulnerabilities[] | select(.severity == "medium")] | length' snyk-results.json 2>/dev/null || echo "0")
              
              echo "- 📊 **Total Vulnerabilities**: $TOTAL_VULNS" >> $GITHUB_STEP_SUMMARY
              echo "- 🚨 **Critical**: $CRITICAL_VULNS" >> $GITHUB_STEP_SUMMARY
              echo "- 🔴 **High**: $HIGH_VULNS" >> $GITHUB_STEP_SUMMARY
              echo "- 🟡 **Medium**: $MEDIUM_VULNS" >> $GITHUB_STEP_SUMMARY
              
              if [ "$CRITICAL_VULNS" -gt "0" ] || [ "$HIGH_VULNS" -gt "0" ]; then
                echo "- 🔴 **Status**: Critical/High vulnerabilities found" >> $GITHUB_STEP_SUMMARY
                echo "- 📋 **Action**: Immediate remediation required" >> $GITHUB_STEP_SUMMARY
              else
                echo "- 🟢 **Status**: No critical/high vulnerabilities" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "- ℹ️ **Status**: Analysis completed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            if [ "${{ steps.snyk-scan.outcome }}" = "success" ]; then
              echo "- 🟢 **Status**: No vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ⚠️ **Status**: Analysis failed or vulnerabilities found" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

      - name: 📤 Upload Snyk Results
        if: always() && hashFiles('snyk-results.json') != ''
        uses: actions/upload-artifact@v4
        with:
          name: snyk-results
          path: snyk-results.json
          retention-days: 30

  security-summary:
    name: 📋 Security Summary & Notification
    runs-on: ubuntu-latest
    needs: [gitleaks, semgrep, snyk]
    if: always()
    
    steps:
      - name: 🔄 Checkout Repository  
        uses: actions/checkout@v4

      - name: 📋 Generate Final Security Summary
        run: |
          echo "## 🎯 Overall Security Assessment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Determine overall status
          OVERALL_STATUS="🟢 PASSED"
          CRITICAL_ISSUES=false
          
          # Check job outcomes
          if [[ "${{ needs.gitleaks.result }}" == "failure" ]]; then
            echo "- ❌ **GitLeaks**: Secrets detected" >> $GITHUB_STEP_SUMMARY
            CRITICAL_ISSUES=true
            OVERALL_STATUS="🔴 FAILED"
          else
            echo "- ✅ **GitLeaks**: No secrets found" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.semgrep.result }}" == "failure" ]]; then
            echo "- ⚠️ **Semgrep**: Issues detected (check logs)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ✅ **Semgrep**: Analysis completed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.snyk.result }}" == "failure" ]]; then
            echo "- ⚠️ **Snyk**: Vulnerabilities detected (check logs)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ✅ **Snyk**: Analysis completed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### $OVERALL_STATUS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$CRITICAL_ISSUES" = true ]; then
            echo "🚨 **Critical security issues detected!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Immediate Actions Required:**" >> $GITHUB_STEP_SUMMARY
            echo "1. 🔍 Review all failed security checks above" >> $GITHUB_STEP_SUMMARY
            echo "2. 📥 Download artifact reports for detailed analysis" >> $GITHUB_STEP_SUMMARY
            echo "3. 🛠️ Fix critical and high-severity issues" >> $GITHUB_STEP_SUMMARY
            echo "4. 🔄 Re-run security pipeline after fixes" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📖 **Documentation**: [Security Best Practices](https://github.com/${{ github.repository }}/blob/main/README.md#vulnerabilidades-educacionais-intencionais)" >> $GITHUB_STEP_SUMMARY
            
            # Set job outcome
            echo "SECURITY_FAILED=true" >> $GITHUB_ENV
            exit 1
          else
            echo "✅ **All security checks passed successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Your code meets the security requirements. Great job! 🎉" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 💬 Comment on PR (if applicable)
        if: github.event_name == 'pull_request' && needs.gitleaks.result == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🛡️ Security Analysis Results
              
              ❌ **Security vulnerabilities detected in this PR**
              
              Please check the [Security Analysis workflow results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed information.
              
              🔧 **Action Required**: Fix security issues before merging.
              📊 **Reports**: Download artifacts from the workflow run for detailed analysis.`
            });