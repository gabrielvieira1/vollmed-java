import os
import json
import google.generativeai as genai
from pathlib import Path
from dotenv import load_dotenv

# --- Configura√ß√£o ---

# Carrega as vari√°veis de ambiente do arquivo .env na raiz do projeto
dotenv_path = Path(__file__).parent.parent / '.env'
load_dotenv(dotenv_path=dotenv_path)

# Pega a chave de API da vari√°vel de ambiente
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if not GEMINI_API_KEY:
    print("Erro: A vari√°vel de ambiente GEMINI_API_KEY n√£o foi encontrada no arquivo .env.")
    print(f"Verifique se o arquivo '{dotenv_path}' existe e cont√©m a chave.")
    exit(1)

genai.configure(api_key=GEMINI_API_KEY)

# Diret√≥rio onde os logs est√£o localizados
LOGS_DIR = Path(__file__).parent.parent / "logs"
LOG_PATTERNS = ["snyk*.log", "semgrep*.log", "gitleaks*.log"]

# Diret√≥rio onde os relat√≥rios est√£o localizados
REPORTS_DIR = Path(__file__).parent.parent / "reports"
DEPENDENCY_CHECK_REPORT = "dependency-check-report.json"

# --- Fun√ß√µes ---


def read_log_files():
    """L√™ o conte√∫do dos arquivos de log de vulnerabilidade."""
    log_contents = {}
    print(f"Procurando por logs em: {LOGS_DIR}")

    for pattern in LOG_PATTERNS:
        found_files = list(LOGS_DIR.glob(pattern))
        if not found_files:
            print(f"  - Nenhum log encontrado para o padr√£o: {pattern}")
            continue

        for log_file in found_files:
            try:
                print(f"  - Lendo o arquivo de log: {log_file.name}")
                content = log_file.read_text(encoding="utf-8")
                log_contents[log_file.name] = content
            except Exception as e:
                print(f"    Erro ao ler o arquivo {log_file.name}: {e}")

    return log_contents


def read_dependency_check_report():
    """L√™ o relat√≥rio JSON do OWASP Dependency-Check."""
    report_path = REPORTS_DIR / DEPENDENCY_CHECK_REPORT

    if not report_path.exists():
        print(f"  - Relat√≥rio Dependency-Check n√£o encontrado: {report_path}")
        return None

    try:
        print(f"  - Lendo relat√≥rio Dependency-Check: {report_path.name}")
        with open(report_path, 'r', encoding='utf-8') as f:
            data = json.load(f)

        # Extrair informa√ß√µes relevantes para o resumo
        vulnerabilities_summary = []
        total_deps = len(data.get('dependencies', []))
        total_vulns = 0
        severity_count = {'CRITICAL': 0, 'HIGH': 0, 'MEDIUM': 0, 'LOW': 0}

        for dep in data.get('dependencies', []):
            if 'vulnerabilities' in dep:
                dep_vulns = dep['vulnerabilities']
                total_vulns += len(dep_vulns)

                for vuln in dep_vulns:
                    severity = vuln.get('severity', 'UNKNOWN')
                    if severity in severity_count:
                        severity_count[severity] += 1

                    # Obter descri√ß√£o de forma segura
                    desc = vuln.get('description', 'No description')
                    if len(desc) > 200:
                        desc = desc[:200] + "..."

                    vulnerabilities_summary.append({
                        'file': dep.get('fileName', 'Unknown'),
                        'cve': vuln.get('name', 'N/A'),
                        'severity': severity,
                        'description': desc,
                        'cwes': [cwe.get('name') for cwe in
                                 vuln.get('cwes', []) if isinstance(cwe, dict)]
                    })

        return {
            'total_dependencies': total_deps,
            'total_vulnerabilities': total_vulns,
            'severity_count': severity_count,
            'vulnerabilities': vulnerabilities_summary
        }

    except Exception as e:
        print(f"    Erro ao ler o relat√≥rio Dependency-Check: {e}")
        return None


def get_vulnerability_summary(logs, dependency_report):
    """
    Envia logs e relat√≥rio dependency-check para an√°lise com Gemini.
    """
    if not logs and not dependency_report:
        return "Nenhum conte√∫do foi encontrado para an√°lise."

    # Prompt atualizado para incluir dependency-check
    prompt_parts = [
        "Por favor, atue como um especialista em seguran√ßa de aplica√ß√µes",
        "e analise os seguintes dados de ferramentas de seguran√ßa:",
        "Snyk, Semgrep, Gitleaks e OWASP Dependency-Check.",
        "",
        "Forne√ßa um resumo detalhado das vulnerabilidades encontradas,",
        "**formatado como um relat√≥rio em Markdown (.md)**.",
        "",
        "Use os seguintes emojis para indicar os n√≠veis de severidade:",
        "  - üö® Cr√≠tica",
        "  - üü† Alta",
        "  - üü° M√©dia",
        "  - üîµ Baixa",
        "",
        "Estruture o relat√≥rio com t√≠tulos (#), subt√≠tulos (##),",
        "listas (-) e blocos de c√≥digo (```) para os trechos relevantes.",
        "",
        "Para cada vulnerabilidade, inclua:",
        "1. **Descri√ß√£o do problema.**",
        "2. **Arquivo e linha** onde foi encontrada.",
        "3. **Sugest√£o de corre√ß√£o.**",
        ""
    ]

    # Adicionar dados do Dependency-Check se dispon√≠vel
    if dependency_report:
        prompt_parts.extend([
            "--- DEPENDENCY-CHECK REPORT ---",
            f"Total de depend√™ncias: {dependency_report['total_dependencies']}",
            f"Total de vulnerabilidades: {dependency_report['total_vulnerabilities']}",
            f"Vulnerabilidades CRITICAL: {dependency_report['severity_count']['CRITICAL']}",
            f"Vulnerabilidades HIGH: {dependency_report['severity_count']['HIGH']}",
            f"Vulnerabilidades MEDIUM: {dependency_report['severity_count']['MEDIUM']}",
            f"Vulnerabilidades LOW: {dependency_report['severity_count']['LOW']}",
            "",
            "### Principais Vulnerabilidades:",
        ])

        # Adicionar as 10 vulnerabilidades mais cr√≠ticas
        critical_vulns = [v for v in dependency_report['vulnerabilities']
                          if v['severity'] in ['CRITICAL', 'HIGH']][:10]

        for vuln in critical_vulns:
            prompt_parts.append(
                f"- **{vuln['cve']}** ({vuln['severity']}) em {vuln['file']}")
            prompt_parts.append(f"  Descri√ß√£o: {vuln['description']}")
            if vuln['cwes']:
                prompt_parts.append(f"  CWEs: {', '.join(vuln['cwes'])}")
            prompt_parts.append("")

    # Adicionar logs das outras ferramentas
    if logs:
        prompt_parts.append("--- SECURITY TOOLS LOGS ---")
        for filename, content in logs.items():
            prompt_parts.append(f"\n--- Log: {filename} ---")
            prompt_parts.append(content)

    prompt = "\n".join(prompt_parts)

    print("\nGerando relat√≥rio com IA do Gemini...")
    try:
        model = genai.GenerativeModel('gemini-1.5-flash')
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        return f"## üö® Erro ao Gerar Relat√≥rio\n\n{e}"

# --- Execu√ß√£o Principal ---


def main():
    """Fun√ß√£o principal que orquestra a execu√ß√£o do script."""
    print("ü§ñ Iniciando gerador de relat√≥rio de vulnerabilidades com IA...")

    # Ler logs das ferramentas de seguran√ßa
    log_data = read_log_files()

    # Ler relat√≥rio do Dependency-Check
    dependency_data = read_dependency_check_report()

    if not log_data and not dependency_data:
        print("\n‚ÑπÔ∏è Nenhum arquivo relevante encontrado. Pulando.")
        return

    summary_md = get_vulnerability_summary(log_data, dependency_data)

    # Define o caminho do diret√≥rio de relat√≥rios
    reports_dir = Path(__file__).parent / "reports"
    reports_dir.mkdir(exist_ok=True)

    # Define o nome do arquivo de sa√≠da
    report_path = reports_dir / "vulnerability_summary.md"

    try:
        report_path.write_text(summary_md, encoding="utf-8")
        print("üìã Resultados salvos em scripts/reports/vulnerability_summary.md")
    except Exception as e:
        print(f"\n‚ùå Erro ao salvar o arquivo de relat√≥rio: {e}")
        exit(1)


if __name__ == "__main__":
    main()
