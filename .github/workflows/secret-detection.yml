name: 🔐 Secret Detection (GitLeaks)

on:
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Run in test mode (succeeds even with vulnerabilities)'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'
  workflow_call:
    inputs:
      test_mode:
        description: 'Run in test mode'
        required: false
        type: string
        default: 'false'

permissions:
  contents: read
  security-events: write
  actions: read

env:
  # Test Mode Configuration
  TEST_MODE: ${{ github.event.inputs.test_mode || inputs.test_mode || 'false' }}

jobs:
  secret-detection:
    name: 🔐 GitLeaks - Secret Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 🔄 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Run GitLeaks Secret Detection
        id: gitleaks-scan
        run: |
          echo "🕵️ Running GitLeaks secret detection scan..."
          
          # Create necessary directories
          mkdir -p logs artifacts
          
          # Run GitLeaks via Docker - same command as pre-commit
          docker run --rm \
            -v $(pwd):/path \
            zricethezav/gitleaks:latest \
            detect --source=/path --no-git --verbose \
            --report-format=json --report-path=/path/artifacts/gitleaks-report.json \
            || echo "GITLEAKS_FAILED=true" >> $GITHUB_ENV
          
          # Generate SARIF format for GitHub Security tab integration
          if [ -f "artifacts/gitleaks-report.json" ]; then
            docker run --rm \
              -v $(pwd):/path \
              zricethezav/gitleaks:latest \
              detect --source=/path --no-git \
              --report-format=sarif --report-path=/path/artifacts/gitleaks-results.sarif \
              || true
          fi
          
          echo "📋 Scan results saved in artifacts/"
        continue-on-error: true

      - name: 📋 Generate Detailed Secret Report
        if: always()
        run: |
          # Create human-readable report
          if [ -f "artifacts/gitleaks-report.json" ]; then
            echo "# 🔍 Secret Detection Report" > artifacts/secrets-summary.md
            echo "" >> artifacts/secrets-summary.md
            echo "**Repository:** ${{ github.repository }}" >> artifacts/secrets-summary.md
            echo "**Branch:** ${{ github.ref_name }}" >> artifacts/secrets-summary.md
            echo "**Commit:** \`${{ github.sha }}\`" >> artifacts/secrets-summary.md
            echo "**Scan Date:** $(date '+%Y-%m-%d %H:%M:%S UTC')" >> artifacts/secrets-summary.md
            echo "" >> artifacts/secrets-summary.md
            
            # Parse JSON results if jq is available
            if command -v jq >/dev/null 2>&1; then
              TOTAL_SECRETS=$(jq '. | length' artifacts/gitleaks-report.json 2>/dev/null || echo "0")
              echo "**Total Secrets Found:** $TOTAL_SECRETS" >> artifacts/secrets-summary.md
              echo "" >> artifacts/secrets-summary.md
              
              if [ "$TOTAL_SECRETS" -gt "0" ]; then
                echo "## 🚨 Detected Secrets by Type:" >> artifacts/secrets-summary.md
                echo "" >> artifacts/secrets-summary.md
                
                # Group by rule type
                jq -r 'group_by(.RuleID) | .[] | "### " + .[0].RuleID + " (" + (length | tostring) + " occurrences)\n" + (map("- **File:** \(.File) (Line: \(.StartLine))") | join("\n")) + "\n"' artifacts/gitleaks-report.json >> artifacts/secrets-summary.md
                
                echo "" >> artifacts/secrets-summary.md
                echo "## 🛠️ Remediation Steps:" >> artifacts/secrets-summary.md
                echo "1. **Immediate:** Remove or rotate all exposed secrets" >> artifacts/secrets-summary.md
                echo "2. **Environment:** Use environment variables or secure vaults" >> artifacts/secrets-summary.md
                echo "3. **Git History:** Consider using BFG Repo-Cleaner for history cleanup" >> artifacts/secrets-summary.md
                echo "4. **Prevention:** Set up pre-commit hooks to prevent future leaks" >> artifacts/secrets-summary.md
              else
                echo "✅ **No secrets detected!** Repository is clean." >> artifacts/secrets-summary.md
              fi
            else
              echo "⚠️ jq not available for detailed parsing" >> artifacts/secrets-summary.md
            fi
          else
            echo "# ✅ Secret Detection Report - Clean Scan" > artifacts/secrets-summary.md
            echo "" >> artifacts/secrets-summary.md
            echo "**Status:** No secrets or credentials detected in the repository." >> artifacts/secrets-summary.md
          fi

      - name: 📊 Security Assessment Summary
        if: always()
        run: |
          echo "## 🔐 Secret Detection Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if secrets were found
          if [[ "$GITLEAKS_FAILED" == "true" ]] || [[ "${{ steps.gitleaks-scan.outcome }}" == "failure" ]]; then
            # Parse results for summary
            if [ -f "artifacts/gitleaks-report.json" ] && command -v jq >/dev/null 2>&1; then
              TOTAL_SECRETS=$(jq '. | length' artifacts/gitleaks-report.json 2>/dev/null || echo "0")
              UNIQUE_FILES=$(jq -r '.[].File' artifacts/gitleaks-report.json 2>/dev/null | sort -u | wc -l || echo "0")
              
              echo "- 🔴 **Status**: SECRETS DETECTED" >> $GITHUB_STEP_SUMMARY
              echo "- 📊 **Total Secrets**: $TOTAL_SECRETS" >> $GITHUB_STEP_SUMMARY
              echo "- 📁 **Affected Files**: $UNIQUE_FILES" >> $GITHUB_STEP_SUMMARY
              echo "- 🔍 **Scan Coverage**: Full repository (all files)" >> $GITHUB_STEP_SUMMARY
              echo "- ⚠️ **Risk Level**: CRITICAL - Immediate action required" >> $GITHUB_STEP_SUMMARY
            else
              echo "- 🔴 **Status**: SECRETS DETECTED" >> $GITHUB_STEP_SUMMARY
              echo "- 🔍 **Scan Coverage**: Full repository scan completed" >> $GITHUB_STEP_SUMMARY
              echo "- ⚠️ **Risk Level**: CRITICAL - Review required" >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🚨 Required Actions:" >> $GITHUB_STEP_SUMMARY
            echo "1. **Immediate**: Rotate/revoke all exposed secrets" >> $GITHUB_STEP_SUMMARY
            echo "2. **Review**: Download detailed report from artifacts" >> $GITHUB_STEP_SUMMARY
            echo "3. **Remediate**: Remove secrets from code and git history" >> $GITHUB_STEP_SUMMARY
            echo "4. **Prevent**: Implement secure secret management" >> $GITHUB_STEP_SUMMARY
            
            # Handle test mode vs production mode
            if [[ "${{ env.TEST_MODE }}" != "true" ]]; then
              echo "::error title=Secrets Detected::GitLeaks found exposed secrets in the repository. Immediate remediation required."
              exit 1
            else
              echo "::warning title=Test Mode - Secrets Found::Secrets detected but continuing in test mode. Fix before production deployment."
            fi
          else
            echo "- ✅ **Status**: No secrets detected" >> $GITHUB_STEP_SUMMARY
            echo "- 🔍 **Scan Coverage**: Full repository scan completed" >> $GITHUB_STEP_SUMMARY
            echo "- 🛡️ **Security Posture**: Clean - no exposed credentials" >> $GITHUB_STEP_SUMMARY
            echo "- 📋 **Recommendation**: Continue current security practices" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📚 Resources:" >> $GITHUB_STEP_SUMMARY
          echo "- [GitLeaks Documentation](https://github.com/gitleaks/gitleaks)" >> $GITHUB_STEP_SUMMARY
          echo "- [Secret Management Best Practices](https://owasp.org/www-project-application-security-verification-standard/)" >> $GITHUB_STEP_SUMMARY

      - name: 📤 Upload Secret Detection Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: secret-detection-results
          path: |
            artifacts/
          retention-days: 30

      - name: 📋 Upload SARIF to GitHub Security
        if: always() && hashFiles('artifacts/gitleaks-results.sarif') != ''
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: artifacts/gitleaks-results.sarif
          category: secret-detection
